    DECLARE      reason_id    dbms_server_alert.REASON_ID_T := NULL;      db_name      recent_resource_incarnations$.db_unique_name%TYPE :=                   :db_unique_name;      inst_name    recent_resource_incarnations$.instance_name%TYPE :=                   :instance_name;      event_id     NUMBER := :event_id;      event_time   TIMESTAMP WITH TIME ZONE      :=                   TO_TIMESTAMP_TZ(:event_time,                                   :timestamp_fmt,                                    'NLS_CALENDAR=''Gregorian''');    BEGIN      CASE :reason_name        WHEN 'DATABASE_UP' THEN          reason_id := dbms_server_alert.RSN_FAN_DATABASE_UP;        WHEN 'DATABASE_DOWN' THEN          reason_id := dbms_server_alert.RSN_FAN_DATABASE_DOWN;        WHEN 'INSTANCE_DOWN' THEN          reason_id := dbms_server_alert.RSN_FAN_INSTANCE_DOWN;        WHEN 'SERVICE_UP' THEN          reason_id := dbms_server_alert.RSN_FAN_SERVICE_UP;        WHEN 'SERVICE_DOWN' THEN          reason_id := dbms_server_alert.RSN_FAN_SERVICE_DOWN;        WHEN 'SERVICE_MEMBER_UP' THEN          reason_id := dbms_server_alert.RSN_FAN_SERVICE_MEMBER_UP;        WHEN 'SERVICE_MEMBER_DOWN' THEN          reason_id := dbms_server_alert.RSN_FAN_SERVICE_MEMBER_DOWN;        WHEN 'NODE_DOWN' THEN          reason_id := dbms_server_alert.RSN_FAN_NODE_DOWN;      END CASE;      dbms_ha_alerts_prvt.post_ha_alert(        reason_id            => reason_id,        same_transaction     => FALSE,        clear_old_alert      => FALSE,        database_unique_name => db_name,        instance_name        => inst_name,        service_name         => :service_name,        host_name            => :host_name,        incarnation          => :incarnation,        event_reason         => :event_reason,        event_time           => event_time,        cardinality          => :cardinality,        event_id             => event_id,        timeout_seconds      => :alert_timeout_seconds,        immediate_timeout    => :immed_timeout = 'Y',        duplicates_ok        => TRUE);    END;