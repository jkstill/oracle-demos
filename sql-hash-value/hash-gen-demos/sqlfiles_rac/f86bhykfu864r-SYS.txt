INSERT /*+  LEADING(@"SEL$F5BB74E1" "H"@"SEL$2" "A"@"SEL$1")  USE_NL(@"SEL$F5BB74E1" "A"@"SEL$1")         */ INTO  WRH$_ACTIVE_SESSION_HISTORY  ( snap_id, dbid, instance_number , sample_id, sample_time,sample_time_utc, usecs_per_row , session_id, session_serial#, session_type , flags , user_id , sql_id, sql_child_number, sql_opcode, force_matching_signature , top_level_sql_id, top_level_sql_opcode , sql_plan_hash_value, sql_full_plan_hash_value , sql_adaptive_plan_resolved , sql_plan_line_id , sql_plan_operation#, sql_plan_options# , sql_exec_id, sql_exec_start , plsql_entry_object_id, plsql_entry_subprogram_id , plsql_object_id,       plsql_subprogram_id , qc_instance_id, qc_session_id, qc_session_serial#, px_flags , event_id, seq#, p1, p2, p3 , wait_time, time_waited , blocking_session, blocking_session_serial#, blocking_inst_id , current_obj#, current_file#, current_block#, current_row# , top_level_call#, consumer_group_id, xid, remote_instance#, time_model , service_hash, program, module, action, client_id, machine, port,   ecid , dbreplay_file_id, dbreplay_call_counter , con_dbid, per_pdb , tm_delta_time, tm_delta_cpu_time, tm_delta_db_time, delta_time, delta_read_io_requests, delta_write_io_requests, delta_read_io_bytes, delta_write_io_bytes, delta_interconnect_io_bytes, pga_allocated, temp_space_allocated , dbop_name, dbop_exec_id  )  (SELECT /*+ PARAM('_module_action_old_length',0) */:snap_id, :dbid, :instance_number , a.sample_id, a.sample_time,a.sample_time_utc , a.usecs_per_row * :disk_filter_ratio , a.session_id, a.session_serial#, a.session_type , decode(a.flags, 0, to_number(NULL), a.flags) , a.user_id , a.sql_id, a.sql_child_number, a.sql_opcode, a.force_matching_signature , a.top_level_sql_id, a.top_level_sql_opcode , a.sql_plan_hash_value, a.sql_full_plan_hash_value , a.sql_adaptive_plan_resolved , a.sql_plan_line_id , a.sql_plan_operation#, a.sql_plan_options# , a.sql_exec_id, a.sql_exec_start , a.plsql_entry_object_id, a.plsql_entry_subprogram_id , a.plsql_object_id,       a.plsql_subprogram_id , a.qc_instance_id, a.qc_session_id, a.qc_session_serial#, a.px_flags , a.event_id, a.seq#, a.p1, a.p2, a.p3 , a.wait_time, a.time_waited , a.blocking_session, a.blocking_session_serial#, a.blocking_inst_id , a.current_obj#, a.current_file#, a.current_block#, a.current_row# , a.top_level_call#, a.consumer_group_id, a.xid, a.remote_instance# , a.time_model , a.service_hash , substrb(a.program, 1, 64) , a.module, a.action, a.client_id, a.machine, a.port, a.ecid , a.dbreplay_file_id, a.dbreplay_call_counter , a.con_dbid, a.con_id , decode(a.tm_delta_time, 0, to_number(null), a.tm_delta_time), decode(a.tm_delta_time, 0, to_number(null), a.tm_delta_cpu_time), decode(a.tm_delta_time, 0, to_number(null), a.tm_delta_db_time), decode(a.delta_time, 0, to_number(null),          a.delta_time), decode(a.delta_time, 0, to_number(null),          decode(a.delta_read_io_requests, 0, to_number(null),                 a.delta_read_io_requests)), decode(a.delta_time, 0, to_number(null),          decode(a.delta_write_io_requests, 0, to_number(null),                 a.delta_write_io_requests)), decode(a.delta_time, 0, to_number(null),          decode(a.delta_read_io_bytes, 0, to_number(null),                 a.delta_read_io_bytes)), decode(a.delta_time, 0, to_number(null),          decode(a.delta_write_io_bytes, 0, to_number(null),                 a.delta_write_io_bytes)), decode(a.delta_time, 0, to_number(null),          decode(a.delta_interconnect_io_bytes, 0, to_number(null),                 a.delta_interconnect_io_bytes)), decode(a.pga_allocated, 0, to_number(null), a.pga_allocated), decode(a.pga_allocated, 0, to_number(null),          decode(a.temp_space_allocated, 0, to_number(null),                 a.temp_space_allocated)) , a.dbop_name, a.dbop_exec_id  FROM     x$ash a,          (SELECT h.sample_addr, h.sample_id           FROM   x$kewash h          WHERE                  ( (h.sample_id >= :begin_flushing) and                   (h.sample_id <  :latest_sample_id) )             and (nlssort(h.is_awr_sample,'nls_sort=BINARY') =                  nlssort('Y', 'nls_sort=BINARY'))           ) shdr  WHERE  (1 = 1)  AND ( a.con_id < 4099  )     and shdr.sample_addr     = a.sample_addr     and shdr.sample_id       = a.sample_id     and nlssort(a.need_awr_sample, 'nls_sort=BINARY') =         nlssort('Y', 'nls_sort=BINARY')) 